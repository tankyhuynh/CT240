openapi: '3.0.2'
info:
  title: Api document
  version: '1.0'
servers:
  - url: http://localhost:3000/api/v1/

components:
  schemas:
    room:
      type: object
      properties:
        name: 
          type: string
        members:
          type: array
          items:
            type: string
    message: 
      type: object
      properties:
        sender: 
          type: string
        data: 
          type: object
        room: 
          type: string
        created_at: 
          type: string
          format: date


    reject: 
      type: object
      properties:
        error: 
          type: string
    profile:
      type: object
      properties:
        _id: 
          type: string
        name:
          type: string
        avatar: 
          type: string
    request:
      type: object
      properties:
        _id:
          type: string
        sender: 
          type: string
        receiver:
          type: string
        introduce: 
          type: string

tags:
  - name: authentication
  - name: accounts
  - name: profiles
  - name: friends

paths:
  /test:
    get:
      responses:
        '200':
          description: OK

  /users/login:
    post: 
      summary: Login a account
      tags:
        - "authentication"
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: 
                    type: string
        "400": 
          description: error
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/reject"
  /users/register: 
    post:
      summary: Register a new account
      tags:
        - "authentication"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone: 
                  type: string
                password:
                  type: string
                name: 
                  type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: 
                    type: string
        "400":
          description: error
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/reject"
  /users/logout: 
    delete: 
      summary: Logout account 
      tags:
        - "authentication"
      responses:
        "200":
          description: ok

  /accounts:
    put:
      summary: Update password of account
      tags:
        - "accounts"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: ok
        "400":
          description: error
  
  /profiles:
    get:
      summary: get all profile correct with phone
      tags:
        - "profiles"
      parameters:
        - in: query
          name: phone
          schema:
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/profile"
    put:
      summary: update profile
      tags:
        - "profiles"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                avatar:
                  type: string
      responses:
        "200":
          description: ok
  /profiles/{:id}:
    get:
      summary: get profile of a user
      tags:
        - "profiles"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/profile"
        

  /friends:
    get:
      summary: get all friends 
      tags:
        - "friends"
      parameters:
        - in: query
          name: page
          schema:
            type: number
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      type: object
                      properties:
                        _id: 
                          type: string
                        ref: 
                          type: string 
                  previous:
                    type: string
                  next: 
                    type: string

                
  /friends/{:id}:
    get: 
      summary: Delete a friend
      tags:
        - "friends"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: ok
          content: 
             application/json:
              schema:
                $ref:  "#/components/schemas/profile"
    delete: 
      summary: Delete a friend
      tags:
        - "friends"
      parameters:
        - in: path
          name: id
          description: id of friend
          schema:
            type: string
          required: true
      responses:
        "200":
          description: ok
  
  /requests:
    get: 
      summary: Get all friend request
      tags:
        - "request"
      parameters:
        - in: query
          name: page
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        ref:
                          type: string
                  previous:
                    type: string
                  next: 
                    type: string
    post:
      summary: create a new friend request
      tags:
        - "request"
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                receiver: 
                  type: string
                introduce:
                  type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/request"
              

  /requests/{:id}:
    get: 
      summary: get info of request
      tags:
        - "request"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Id of request
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/request"
        "400":
          description: error
    put: 
      summary: reply a request
      tags:
        - "request"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Id of request
        - in: query
          name: accept
          required: true
          schema: 
            type: boolean
      responses:
        "200":
          description: ok
    
    delete:
      summary: Delete user's request
      tags:
        - "request"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Id of request
      responses:
        "200":
          description: ok
          
  /rooms:
    get: 
      summary: get all room of user
      tags:
      - "rooms"
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - in: query 
          name: page
          schema:
            type: number
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        ref: 
                          type: string
                  previous:
                    type: string
                  next: 
                    type: string
    post:
      summary: create a account
      tags:
      - "rooms"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                members:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
             schema:
              $ref:  "#/components/schemas/room"
  /rooms/{:id}:
    get:
      summary: get info of a room
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/room"
    put:
      summary: update info of room
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: string
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                name: 
                  type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room"
    delete: 
      summary: Delete a room
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: string
      responses:
        "200":
          description: ok
    
  /rooms/{:id}/members:
    get: 
      summary: get all member of "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      tags:
      - "rooms"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      type: object
                      properties:
                        _id: 
                          type: string
                        ref:
                          type: string
    post:
      summary: add a new member 
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                _id: 
                  type: string
      responses:
        "200":
          description: ok
  /rooms/{:id}/members/{:member}:
    put:
      summary: setting a member right
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: member
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin:  
                  type: string
      responses:
        "200":
          description: ok
          
    delete:
      summary: delete a member
      tags:
        - "rooms"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: member
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ok
  /rooms/{:id}/messages:
    get: 
      summary: Get some message from room
      tags:
        - 'rooms'
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: string
        - in: query
          name: last
          description: last message in room
          schema: 
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
                schema:
                  $ref:  "#/components/schemas/message"
        

                      
            



          
        
        
      
    
            
              
              
    
            

        

         
          

            
        
                


  